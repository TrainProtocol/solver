// source: blockchain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var protobuf$net_bcl_pb = require('./protobuf-net/bcl_pb.js');
goog.object.extend(proto, protobuf$net_bcl_pb);
goog.exportSymbol('proto.AddLockSigTransactionPrepareRequest', null, global);
goog.exportSymbol('proto.AddLockSignatureModel', null, global);
goog.exportSymbol('proto.AddLockSignatureModel.SubtypeCase', null, global);
goog.exportSymbol('proto.AddLockSignatureRequest', null, global);
goog.exportSymbol('proto.AllowanceRequest', null, global);
goog.exportSymbol('proto.ApprovePrepareRequest', null, global);
goog.exportSymbol('proto.BalanceRequest', null, global);
goog.exportSymbol('proto.BalanceResponse', null, global);
goog.exportSymbol('proto.BaseRequest', null, global);
goog.exportSymbol('proto.BaseRequest.SubtypeCase', null, global);
goog.exportSymbol('proto.BlockNumberResponse', null, global);
goog.exportSymbol('proto.BlockRangeModel', null, global);
goog.exportSymbol('proto.DateTimeOffset', null, global);
goog.exportSymbol('proto.EventRequest', null, global);
goog.exportSymbol('proto.Fee', null, global);
goog.exportSymbol('proto.GetBatchTransactionRequest', null, global);
goog.exportSymbol('proto.GetTransactionRequest', null, global);
goog.exportSymbol('proto.HTLCBlockEventResponse', null, global);
goog.exportSymbol('proto.HTLCCommitEventMessage', null, global);
goog.exportSymbol('proto.HTLCCommitTransactionPrepareRequest', null, global);
goog.exportSymbol('proto.HTLCLockEventMessage', null, global);
goog.exportSymbol('proto.HTLCLockTransactionPrepareRequest', null, global);
goog.exportSymbol('proto.HTLCRedeemTransactionPrepareRequest', null, global);
goog.exportSymbol('proto.HTLCRefundTransactionPrepareRequest', null, global);
goog.exportSymbol('proto.HashlockModel', null, global);
goog.exportSymbol('proto.NetworkType', null, global);
goog.exportSymbol('proto.NextNonceRequest', null, global);
goog.exportSymbol('proto.PrepareTransactionResponse', null, global);
goog.exportSymbol('proto.SpenderAddressRequest', null, global);
goog.exportSymbol('proto.TransactionBuilderRequest', null, global);
goog.exportSymbol('proto.TransactionExecutionContext', null, global);
goog.exportSymbol('proto.TransactionRequest', null, global);
goog.exportSymbol('proto.TransactionResponse', null, global);
goog.exportSymbol('proto.TransactionStatus', null, global);
goog.exportSymbol('proto.TransactionType', null, global);
goog.exportSymbol('proto.TransferPrepareRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddLockSigTransactionPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AddLockSigTransactionPrepareRequest.repeatedFields_, null);
};
goog.inherits(proto.AddLockSigTransactionPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddLockSigTransactionPrepareRequest.displayName = 'proto.AddLockSigTransactionPrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddLockSignatureModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.AddLockSignatureModel.repeatedFields_, proto.AddLockSignatureModel.oneofGroups_);
};
goog.inherits(proto.AddLockSignatureModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddLockSignatureModel.displayName = 'proto.AddLockSignatureModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddLockSignatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddLockSignatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddLockSignatureRequest.displayName = 'proto.AddLockSignatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AllowanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AllowanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AllowanceRequest.displayName = 'proto.AllowanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApprovePrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApprovePrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ApprovePrepareRequest.displayName = 'proto.ApprovePrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BalanceRequest.displayName = 'proto.BalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BalanceResponse.displayName = 'proto.BalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.BaseRequest.oneofGroups_);
};
goog.inherits(proto.BaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BaseRequest.displayName = 'proto.BaseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockNumberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockNumberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockNumberResponse.displayName = 'proto.BlockNumberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockRangeModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockRangeModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockRangeModel.displayName = 'proto.BlockRangeModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DateTimeOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DateTimeOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DateTimeOffset.displayName = 'proto.DateTimeOffset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EventRequest.displayName = 'proto.EventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Fee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Fee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Fee.displayName = 'proto.Fee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetBatchTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetBatchTransactionRequest.repeatedFields_, null);
};
goog.inherits(proto.GetBatchTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetBatchTransactionRequest.displayName = 'proto.GetBatchTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetTransactionRequest.displayName = 'proto.GetTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCBlockEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.HTLCBlockEventResponse.repeatedFields_, null);
};
goog.inherits(proto.HTLCBlockEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCBlockEventResponse.displayName = 'proto.HTLCBlockEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCCommitEventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HTLCCommitEventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCCommitEventMessage.displayName = 'proto.HTLCCommitEventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCCommitTransactionPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.HTLCCommitTransactionPrepareRequest.repeatedFields_, null);
};
goog.inherits(proto.HTLCCommitTransactionPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCCommitTransactionPrepareRequest.displayName = 'proto.HTLCCommitTransactionPrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCLockEventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HTLCLockEventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCLockEventMessage.displayName = 'proto.HTLCLockEventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCLockTransactionPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HTLCLockTransactionPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCLockTransactionPrepareRequest.displayName = 'proto.HTLCLockTransactionPrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCRedeemTransactionPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HTLCRedeemTransactionPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCRedeemTransactionPrepareRequest.displayName = 'proto.HTLCRedeemTransactionPrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HTLCRefundTransactionPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HTLCRefundTransactionPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HTLCRefundTransactionPrepareRequest.displayName = 'proto.HTLCRefundTransactionPrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HashlockModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HashlockModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HashlockModel.displayName = 'proto.HashlockModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NextNonceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NextNonceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NextNonceRequest.displayName = 'proto.NextNonceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PrepareTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PrepareTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PrepareTransactionResponse.displayName = 'proto.PrepareTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpenderAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpenderAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpenderAddressRequest.displayName = 'proto.SpenderAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionBuilderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionBuilderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionBuilderRequest.displayName = 'proto.TransactionBuilderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionExecutionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransactionExecutionContext.repeatedFields_, null);
};
goog.inherits(proto.TransactionExecutionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionExecutionContext.displayName = 'proto.TransactionExecutionContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionRequest.displayName = 'proto.TransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransactionResponse.displayName = 'proto.TransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransferPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransferPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TransferPrepareRequest.displayName = 'proto.TransferPrepareRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AddLockSigTransactionPrepareRequest.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddLockSigTransactionPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddLockSigTransactionPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddLockSigTransactionPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
hashlock: jspb.Message.getFieldWithDefault(msg, 2, ""),
timelock: jspb.Message.getFieldWithDefault(msg, 3, 0),
r: jspb.Message.getFieldWithDefault(msg, 4, ""),
s: jspb.Message.getFieldWithDefault(msg, 5, ""),
v: jspb.Message.getFieldWithDefault(msg, 6, ""),
signature: jspb.Message.getFieldWithDefault(msg, 7, ""),
asset: jspb.Message.getFieldWithDefault(msg, 8, ""),
signaturearrayList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddLockSigTransactionPrepareRequest}
 */
proto.AddLockSigTransactionPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddLockSigTransactionPrepareRequest;
  return proto.AddLockSigTransactionPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddLockSigTransactionPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddLockSigTransactionPrepareRequest}
 */
proto.AddLockSigTransactionPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashlock(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimelock(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setR(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setV(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignaturearray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddLockSigTransactionPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddLockSigTransactionPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddLockSigTransactionPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHashlock();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimelock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getR();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getV();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSignaturearrayList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Hashlock = 2;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getHashlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setHashlock = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 Timelock = 3;
 * @return {number}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getTimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setTimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string R = 4;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setR = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string S = 5;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setS = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string V = 6;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getV = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setV = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Signature = 7;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string Asset = 8;
 * @return {string}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string SignatureArray = 9;
 * @return {!Array<string>}
 */
proto.AddLockSigTransactionPrepareRequest.prototype.getSignaturearrayList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.setSignaturearrayList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.addSignaturearray = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AddLockSigTransactionPrepareRequest} returns this
 */
proto.AddLockSigTransactionPrepareRequest.prototype.clearSignaturearrayList = function() {
  return this.setSignaturearrayList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AddLockSignatureModel.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AddLockSignatureModel.oneofGroups_ = [[1000]];

/**
 * @enum {number}
 */
proto.AddLockSignatureModel.SubtypeCase = {
  SUBTYPE_NOT_SET: 0,
  ADDLOCKSIGNATUREREQUEST: 1000
};

/**
 * @return {proto.AddLockSignatureModel.SubtypeCase}
 */
proto.AddLockSignatureModel.prototype.getSubtypeCase = function() {
  return /** @type {proto.AddLockSignatureModel.SubtypeCase} */(jspb.Message.computeOneofCase(this, proto.AddLockSignatureModel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddLockSignatureModel.prototype.toObject = function(opt_includeInstance) {
  return proto.AddLockSignatureModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddLockSignatureModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddLockSignatureModel.toObject = function(includeInstance, msg) {
  var f, obj = {
r: jspb.Message.getFieldWithDefault(msg, 1, ""),
s: jspb.Message.getFieldWithDefault(msg, 2, ""),
v: jspb.Message.getFieldWithDefault(msg, 3, ""),
signature: jspb.Message.getFieldWithDefault(msg, 4, ""),
signaturearrayList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
timelock: jspb.Message.getFieldWithDefault(msg, 6, 0),
addlocksignaturerequest: (f = msg.getAddlocksignaturerequest()) && proto.AddLockSignatureRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddLockSignatureModel}
 */
proto.AddLockSignatureModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddLockSignatureModel;
  return proto.AddLockSignatureModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddLockSignatureModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddLockSignatureModel}
 */
proto.AddLockSignatureModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setV(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignaturearray(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimelock(value);
      break;
    case 1000:
      var value = new proto.AddLockSignatureRequest;
      reader.readMessage(value,proto.AddLockSignatureRequest.deserializeBinaryFromReader);
      msg.setAddlocksignaturerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddLockSignatureModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddLockSignatureModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddLockSignatureModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddLockSignatureModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getV();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSignaturearrayList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getTimelock();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAddlocksignaturerequest();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.AddLockSignatureRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string R = 1;
 * @return {string}
 */
proto.AddLockSignatureModel.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.setR = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string S = 2;
 * @return {string}
 */
proto.AddLockSignatureModel.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.setS = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string V = 3;
 * @return {string}
 */
proto.AddLockSignatureModel.prototype.getV = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.setV = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Signature = 4;
 * @return {string}
 */
proto.AddLockSignatureModel.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string SignatureArray = 5;
 * @return {!Array<string>}
 */
proto.AddLockSignatureModel.prototype.getSignaturearrayList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.setSignaturearrayList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.addSignaturearray = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.clearSignaturearrayList = function() {
  return this.setSignaturearrayList([]);
};


/**
 * optional int64 Timelock = 6;
 * @return {number}
 */
proto.AddLockSignatureModel.prototype.getTimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.setTimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional AddLockSignatureRequest AddLockSignatureRequest = 1000;
 * @return {?proto.AddLockSignatureRequest}
 */
proto.AddLockSignatureModel.prototype.getAddlocksignaturerequest = function() {
  return /** @type{?proto.AddLockSignatureRequest} */ (
    jspb.Message.getWrapperField(this, proto.AddLockSignatureRequest, 1000));
};


/**
 * @param {?proto.AddLockSignatureRequest|undefined} value
 * @return {!proto.AddLockSignatureModel} returns this
*/
proto.AddLockSignatureModel.prototype.setAddlocksignaturerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1000, proto.AddLockSignatureModel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddLockSignatureModel} returns this
 */
proto.AddLockSignatureModel.prototype.clearAddlocksignaturerequest = function() {
  return this.setAddlocksignaturerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddLockSignatureModel.prototype.hasAddlocksignaturerequest = function() {
  return jspb.Message.getField(this, 1000) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddLockSignatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddLockSignatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddLockSignatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddLockSignatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
hashlock: jspb.Message.getFieldWithDefault(msg, 2, ""),
signeraddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
asset: jspb.Message.getFieldWithDefault(msg, 4, ""),
networkname: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddLockSignatureRequest}
 */
proto.AddLockSignatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddLockSignatureRequest;
  return proto.AddLockSignatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddLockSignatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddLockSignatureRequest}
 */
proto.AddLockSignatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashlock(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigneraddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddLockSignatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddLockSignatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddLockSignatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddLockSignatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHashlock();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSigneraddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNetworkname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.AddLockSignatureRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureRequest} returns this
 */
proto.AddLockSignatureRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Hashlock = 2;
 * @return {string}
 */
proto.AddLockSignatureRequest.prototype.getHashlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureRequest} returns this
 */
proto.AddLockSignatureRequest.prototype.setHashlock = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string SignerAddress = 3;
 * @return {string}
 */
proto.AddLockSignatureRequest.prototype.getSigneraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureRequest} returns this
 */
proto.AddLockSignatureRequest.prototype.setSigneraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Asset = 4;
 * @return {string}
 */
proto.AddLockSignatureRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureRequest} returns this
 */
proto.AddLockSignatureRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string NetworkName = 5;
 * @return {string}
 */
proto.AddLockSignatureRequest.prototype.getNetworkname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddLockSignatureRequest} returns this
 */
proto.AddLockSignatureRequest.prototype.setNetworkname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AllowanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AllowanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AllowanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AllowanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
owneraddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
asset: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AllowanceRequest}
 */
proto.AllowanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AllowanceRequest;
  return proto.AllowanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AllowanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AllowanceRequest}
 */
proto.AllowanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneraddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AllowanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AllowanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AllowanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AllowanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwneraddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string OwnerAddress = 1;
 * @return {string}
 */
proto.AllowanceRequest.prototype.getOwneraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AllowanceRequest} returns this
 */
proto.AllowanceRequest.prototype.setOwneraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Asset = 2;
 * @return {string}
 */
proto.AllowanceRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AllowanceRequest} returns this
 */
proto.AllowanceRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApprovePrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ApprovePrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApprovePrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApprovePrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
asset: jspb.Message.getFieldWithDefault(msg, 1, ""),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApprovePrepareRequest}
 */
proto.ApprovePrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApprovePrepareRequest;
  return proto.ApprovePrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApprovePrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApprovePrepareRequest}
 */
proto.ApprovePrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApprovePrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApprovePrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApprovePrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApprovePrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Asset = 1;
 * @return {string}
 */
proto.ApprovePrepareRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ApprovePrepareRequest} returns this
 */
proto.ApprovePrepareRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bcl.Decimal Amount = 2;
 * @return {?proto.bcl.Decimal}
 */
proto.ApprovePrepareRequest.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 2));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.ApprovePrepareRequest} returns this
*/
proto.ApprovePrepareRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ApprovePrepareRequest} returns this
 */
proto.ApprovePrepareRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ApprovePrepareRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
address: jspb.Message.getFieldWithDefault(msg, 1, ""),
asset: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BalanceRequest}
 */
proto.BalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BalanceRequest;
  return proto.BalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BalanceRequest}
 */
proto.BalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.BalanceRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BalanceRequest} returns this
 */
proto.BalanceRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Asset = 2;
 * @return {string}
 */
proto.BalanceRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.BalanceRequest} returns this
 */
proto.BalanceRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
amountinwei: jspb.Message.getFieldWithDefault(msg, 1, ""),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
decimals: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BalanceResponse}
 */
proto.BalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BalanceResponse;
  return proto.BalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BalanceResponse}
 */
proto.BalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountinwei(value);
      break;
    case 2:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountinwei();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string AmountInWei = 1;
 * @return {string}
 */
proto.BalanceResponse.prototype.getAmountinwei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BalanceResponse} returns this
 */
proto.BalanceResponse.prototype.setAmountinwei = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bcl.Decimal Amount = 2;
 * @return {?proto.bcl.Decimal}
 */
proto.BalanceResponse.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 2));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.BalanceResponse} returns this
*/
proto.BalanceResponse.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BalanceResponse} returns this
 */
proto.BalanceResponse.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BalanceResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 Decimals = 3;
 * @return {number}
 */
proto.BalanceResponse.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceResponse} returns this
 */
proto.BalanceResponse.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BaseRequest.oneofGroups_ = [[1000,2000,4000,5000,6000,7000,8000,9000]];

/**
 * @enum {number}
 */
proto.BaseRequest.SubtypeCase = {
  SUBTYPE_NOT_SET: 0,
  ALLOWANCEREQUEST: 1000,
  BALANCEREQUEST: 2000,
  EVENTREQUEST: 4000,
  GETBATCHTRANSACTIONREQUEST: 5000,
  TRANSACTIONREQUEST: 6000,
  TRANSACTIONBUILDERREQUEST: 7000,
  SPENDERADDRESSREQUEST: 8000,
  NEXTNONCEREQUEST: 9000
};

/**
 * @return {proto.BaseRequest.SubtypeCase}
 */
proto.BaseRequest.prototype.getSubtypeCase = function() {
  return /** @type {proto.BaseRequest.SubtypeCase} */(jspb.Message.computeOneofCase(this, proto.BaseRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BaseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
networkname: jspb.Message.getFieldWithDefault(msg, 1, ""),
allowancerequest: (f = msg.getAllowancerequest()) && proto.AllowanceRequest.toObject(includeInstance, f),
balancerequest: (f = msg.getBalancerequest()) && proto.BalanceRequest.toObject(includeInstance, f),
eventrequest: (f = msg.getEventrequest()) && proto.EventRequest.toObject(includeInstance, f),
getbatchtransactionrequest: (f = msg.getGetbatchtransactionrequest()) && proto.GetBatchTransactionRequest.toObject(includeInstance, f),
transactionrequest: (f = msg.getTransactionrequest()) && proto.TransactionRequest.toObject(includeInstance, f),
transactionbuilderrequest: (f = msg.getTransactionbuilderrequest()) && proto.TransactionBuilderRequest.toObject(includeInstance, f),
spenderaddressrequest: (f = msg.getSpenderaddressrequest()) && proto.SpenderAddressRequest.toObject(includeInstance, f),
nextnoncerequest: (f = msg.getNextnoncerequest()) && proto.NextNonceRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BaseRequest}
 */
proto.BaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BaseRequest;
  return proto.BaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BaseRequest}
 */
proto.BaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkname(value);
      break;
    case 1000:
      var value = new proto.AllowanceRequest;
      reader.readMessage(value,proto.AllowanceRequest.deserializeBinaryFromReader);
      msg.setAllowancerequest(value);
      break;
    case 2000:
      var value = new proto.BalanceRequest;
      reader.readMessage(value,proto.BalanceRequest.deserializeBinaryFromReader);
      msg.setBalancerequest(value);
      break;
    case 4000:
      var value = new proto.EventRequest;
      reader.readMessage(value,proto.EventRequest.deserializeBinaryFromReader);
      msg.setEventrequest(value);
      break;
    case 5000:
      var value = new proto.GetBatchTransactionRequest;
      reader.readMessage(value,proto.GetBatchTransactionRequest.deserializeBinaryFromReader);
      msg.setGetbatchtransactionrequest(value);
      break;
    case 6000:
      var value = new proto.TransactionRequest;
      reader.readMessage(value,proto.TransactionRequest.deserializeBinaryFromReader);
      msg.setTransactionrequest(value);
      break;
    case 7000:
      var value = new proto.TransactionBuilderRequest;
      reader.readMessage(value,proto.TransactionBuilderRequest.deserializeBinaryFromReader);
      msg.setTransactionbuilderrequest(value);
      break;
    case 8000:
      var value = new proto.SpenderAddressRequest;
      reader.readMessage(value,proto.SpenderAddressRequest.deserializeBinaryFromReader);
      msg.setSpenderaddressrequest(value);
      break;
    case 9000:
      var value = new proto.NextNonceRequest;
      reader.readMessage(value,proto.NextNonceRequest.deserializeBinaryFromReader);
      msg.setNextnoncerequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAllowancerequest();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.AllowanceRequest.serializeBinaryToWriter
    );
  }
  f = message.getBalancerequest();
  if (f != null) {
    writer.writeMessage(
      2000,
      f,
      proto.BalanceRequest.serializeBinaryToWriter
    );
  }
  f = message.getEventrequest();
  if (f != null) {
    writer.writeMessage(
      4000,
      f,
      proto.EventRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetbatchtransactionrequest();
  if (f != null) {
    writer.writeMessage(
      5000,
      f,
      proto.GetBatchTransactionRequest.serializeBinaryToWriter
    );
  }
  f = message.getTransactionrequest();
  if (f != null) {
    writer.writeMessage(
      6000,
      f,
      proto.TransactionRequest.serializeBinaryToWriter
    );
  }
  f = message.getTransactionbuilderrequest();
  if (f != null) {
    writer.writeMessage(
      7000,
      f,
      proto.TransactionBuilderRequest.serializeBinaryToWriter
    );
  }
  f = message.getSpenderaddressrequest();
  if (f != null) {
    writer.writeMessage(
      8000,
      f,
      proto.SpenderAddressRequest.serializeBinaryToWriter
    );
  }
  f = message.getNextnoncerequest();
  if (f != null) {
    writer.writeMessage(
      9000,
      f,
      proto.NextNonceRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string NetworkName = 1;
 * @return {string}
 */
proto.BaseRequest.prototype.getNetworkname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.setNetworkname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AllowanceRequest AllowanceRequest = 1000;
 * @return {?proto.AllowanceRequest}
 */
proto.BaseRequest.prototype.getAllowancerequest = function() {
  return /** @type{?proto.AllowanceRequest} */ (
    jspb.Message.getWrapperField(this, proto.AllowanceRequest, 1000));
};


/**
 * @param {?proto.AllowanceRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setAllowancerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearAllowancerequest = function() {
  return this.setAllowancerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasAllowancerequest = function() {
  return jspb.Message.getField(this, 1000) != null;
};


/**
 * optional BalanceRequest BalanceRequest = 2000;
 * @return {?proto.BalanceRequest}
 */
proto.BaseRequest.prototype.getBalancerequest = function() {
  return /** @type{?proto.BalanceRequest} */ (
    jspb.Message.getWrapperField(this, proto.BalanceRequest, 2000));
};


/**
 * @param {?proto.BalanceRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setBalancerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearBalancerequest = function() {
  return this.setBalancerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasBalancerequest = function() {
  return jspb.Message.getField(this, 2000) != null;
};


/**
 * optional EventRequest EventRequest = 4000;
 * @return {?proto.EventRequest}
 */
proto.BaseRequest.prototype.getEventrequest = function() {
  return /** @type{?proto.EventRequest} */ (
    jspb.Message.getWrapperField(this, proto.EventRequest, 4000));
};


/**
 * @param {?proto.EventRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setEventrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearEventrequest = function() {
  return this.setEventrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasEventrequest = function() {
  return jspb.Message.getField(this, 4000) != null;
};


/**
 * optional GetBatchTransactionRequest GetBatchTransactionRequest = 5000;
 * @return {?proto.GetBatchTransactionRequest}
 */
proto.BaseRequest.prototype.getGetbatchtransactionrequest = function() {
  return /** @type{?proto.GetBatchTransactionRequest} */ (
    jspb.Message.getWrapperField(this, proto.GetBatchTransactionRequest, 5000));
};


/**
 * @param {?proto.GetBatchTransactionRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setGetbatchtransactionrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearGetbatchtransactionrequest = function() {
  return this.setGetbatchtransactionrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasGetbatchtransactionrequest = function() {
  return jspb.Message.getField(this, 5000) != null;
};


/**
 * optional TransactionRequest TransactionRequest = 6000;
 * @return {?proto.TransactionRequest}
 */
proto.BaseRequest.prototype.getTransactionrequest = function() {
  return /** @type{?proto.TransactionRequest} */ (
    jspb.Message.getWrapperField(this, proto.TransactionRequest, 6000));
};


/**
 * @param {?proto.TransactionRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setTransactionrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearTransactionrequest = function() {
  return this.setTransactionrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasTransactionrequest = function() {
  return jspb.Message.getField(this, 6000) != null;
};


/**
 * optional TransactionBuilderRequest TransactionBuilderRequest = 7000;
 * @return {?proto.TransactionBuilderRequest}
 */
proto.BaseRequest.prototype.getTransactionbuilderrequest = function() {
  return /** @type{?proto.TransactionBuilderRequest} */ (
    jspb.Message.getWrapperField(this, proto.TransactionBuilderRequest, 7000));
};


/**
 * @param {?proto.TransactionBuilderRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setTransactionbuilderrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearTransactionbuilderrequest = function() {
  return this.setTransactionbuilderrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasTransactionbuilderrequest = function() {
  return jspb.Message.getField(this, 7000) != null;
};


/**
 * optional SpenderAddressRequest SpenderAddressRequest = 8000;
 * @return {?proto.SpenderAddressRequest}
 */
proto.BaseRequest.prototype.getSpenderaddressrequest = function() {
  return /** @type{?proto.SpenderAddressRequest} */ (
    jspb.Message.getWrapperField(this, proto.SpenderAddressRequest, 8000));
};


/**
 * @param {?proto.SpenderAddressRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setSpenderaddressrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearSpenderaddressrequest = function() {
  return this.setSpenderaddressrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasSpenderaddressrequest = function() {
  return jspb.Message.getField(this, 8000) != null;
};


/**
 * optional NextNonceRequest NextNonceRequest = 9000;
 * @return {?proto.NextNonceRequest}
 */
proto.BaseRequest.prototype.getNextnoncerequest = function() {
  return /** @type{?proto.NextNonceRequest} */ (
    jspb.Message.getWrapperField(this, proto.NextNonceRequest, 9000));
};


/**
 * @param {?proto.NextNonceRequest|undefined} value
 * @return {!proto.BaseRequest} returns this
*/
proto.BaseRequest.prototype.setNextnoncerequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9000, proto.BaseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BaseRequest} returns this
 */
proto.BaseRequest.prototype.clearNextnoncerequest = function() {
  return this.setNextnoncerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BaseRequest.prototype.hasNextnoncerequest = function() {
  return jspb.Message.getField(this, 9000) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockNumberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockNumberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockNumberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockNumberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
blocknumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
blockhash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockNumberResponse}
 */
proto.BlockNumberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockNumberResponse;
  return proto.BlockNumberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockNumberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockNumberResponse}
 */
proto.BlockNumberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockNumberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockNumberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockNumberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockNumberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 BlockNumber = 1;
 * @return {number}
 */
proto.BlockNumberResponse.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockNumberResponse} returns this
 */
proto.BlockNumberResponse.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string BlockHash = 2;
 * @return {string}
 */
proto.BlockNumberResponse.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.BlockNumberResponse} returns this
 */
proto.BlockNumberResponse.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockRangeModel.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockRangeModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockRangeModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockRangeModel.toObject = function(includeInstance, msg) {
  var f, obj = {
from: jspb.Message.getFieldWithDefault(msg, 1, 0),
to: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockRangeModel}
 */
proto.BlockRangeModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockRangeModel;
  return proto.BlockRangeModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockRangeModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockRangeModel}
 */
proto.BlockRangeModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockRangeModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockRangeModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockRangeModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockRangeModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 From = 1;
 * @return {number}
 */
proto.BlockRangeModel.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockRangeModel} returns this
 */
proto.BlockRangeModel.prototype.setFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 To = 2;
 * @return {number}
 */
proto.BlockRangeModel.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockRangeModel} returns this
 */
proto.BlockRangeModel.prototype.setTo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DateTimeOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.DateTimeOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DateTimeOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DateTimeOffset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DateTimeOffset}
 */
proto.DateTimeOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DateTimeOffset;
  return proto.DateTimeOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DateTimeOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DateTimeOffset}
 */
proto.DateTimeOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DateTimeOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DateTimeOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DateTimeOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DateTimeOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.EventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fromblock: jspb.Message.getFieldWithDefault(msg, 1, 0),
toblock: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventRequest}
 */
proto.EventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventRequest;
  return proto.EventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventRequest}
 */
proto.EventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromblock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToblock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromblock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToblock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 FromBlock = 1;
 * @return {number}
 */
proto.EventRequest.prototype.getFromblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EventRequest} returns this
 */
proto.EventRequest.prototype.setFromblock = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 ToBlock = 2;
 * @return {number}
 */
proto.EventRequest.prototype.getToblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.EventRequest} returns this
 */
proto.EventRequest.prototype.setToblock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Fee.prototype.toObject = function(opt_includeInstance) {
  return proto.Fee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Fee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Fee.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Fee}
 */
proto.Fee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Fee;
  return proto.Fee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Fee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Fee}
 */
proto.Fee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Fee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Fee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Fee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Fee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetBatchTransactionRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetBatchTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetBatchTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetBatchTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetBatchTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
transactionhashesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetBatchTransactionRequest}
 */
proto.GetBatchTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetBatchTransactionRequest;
  return proto.GetBatchTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetBatchTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetBatchTransactionRequest}
 */
proto.GetBatchTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTransactionhashes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetBatchTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetBatchTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetBatchTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetBatchTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionhashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string TransactionHashes = 1;
 * @return {!Array<string>}
 */
proto.GetBatchTransactionRequest.prototype.getTransactionhashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GetBatchTransactionRequest} returns this
 */
proto.GetBatchTransactionRequest.prototype.setTransactionhashesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GetBatchTransactionRequest} returns this
 */
proto.GetBatchTransactionRequest.prototype.addTransactionhashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GetBatchTransactionRequest} returns this
 */
proto.GetBatchTransactionRequest.prototype.clearTransactionhashesList = function() {
  return this.setTransactionhashesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
transactionhash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTransactionRequest}
 */
proto.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTransactionRequest;
  return proto.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTransactionRequest}
 */
proto.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string TransactionHash = 1;
 * @return {string}
 */
proto.GetTransactionRequest.prototype.getTransactionhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetTransactionRequest} returns this
 */
proto.GetTransactionRequest.prototype.setTransactionhash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.HTLCBlockEventResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCBlockEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCBlockEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCBlockEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCBlockEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
htlccommiteventmessagesList: jspb.Message.toObjectList(msg.getHtlccommiteventmessagesList(),
    proto.HTLCCommitEventMessage.toObject, includeInstance),
htlclockeventmessagesList: jspb.Message.toObjectList(msg.getHtlclockeventmessagesList(),
    proto.HTLCLockEventMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCBlockEventResponse}
 */
proto.HTLCBlockEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCBlockEventResponse;
  return proto.HTLCBlockEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCBlockEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCBlockEventResponse}
 */
proto.HTLCBlockEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.HTLCCommitEventMessage;
      reader.readMessage(value,proto.HTLCCommitEventMessage.deserializeBinaryFromReader);
      msg.addHtlccommiteventmessages(value);
      break;
    case 2:
      var value = new proto.HTLCLockEventMessage;
      reader.readMessage(value,proto.HTLCLockEventMessage.deserializeBinaryFromReader);
      msg.addHtlclockeventmessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCBlockEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCBlockEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCBlockEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCBlockEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHtlccommiteventmessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.HTLCCommitEventMessage.serializeBinaryToWriter
    );
  }
  f = message.getHtlclockeventmessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.HTLCLockEventMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated HTLCCommitEventMessage HTLCCommitEventMessages = 1;
 * @return {!Array<!proto.HTLCCommitEventMessage>}
 */
proto.HTLCBlockEventResponse.prototype.getHtlccommiteventmessagesList = function() {
  return /** @type{!Array<!proto.HTLCCommitEventMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.HTLCCommitEventMessage, 1));
};


/**
 * @param {!Array<!proto.HTLCCommitEventMessage>} value
 * @return {!proto.HTLCBlockEventResponse} returns this
*/
proto.HTLCBlockEventResponse.prototype.setHtlccommiteventmessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.HTLCCommitEventMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.HTLCCommitEventMessage}
 */
proto.HTLCBlockEventResponse.prototype.addHtlccommiteventmessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.HTLCCommitEventMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HTLCBlockEventResponse} returns this
 */
proto.HTLCBlockEventResponse.prototype.clearHtlccommiteventmessagesList = function() {
  return this.setHtlccommiteventmessagesList([]);
};


/**
 * repeated HTLCLockEventMessage HTLCLockEventMessages = 2;
 * @return {!Array<!proto.HTLCLockEventMessage>}
 */
proto.HTLCBlockEventResponse.prototype.getHtlclockeventmessagesList = function() {
  return /** @type{!Array<!proto.HTLCLockEventMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.HTLCLockEventMessage, 2));
};


/**
 * @param {!Array<!proto.HTLCLockEventMessage>} value
 * @return {!proto.HTLCBlockEventResponse} returns this
*/
proto.HTLCBlockEventResponse.prototype.setHtlclockeventmessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.HTLCLockEventMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.HTLCLockEventMessage}
 */
proto.HTLCBlockEventResponse.prototype.addHtlclockeventmessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.HTLCLockEventMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HTLCBlockEventResponse} returns this
 */
proto.HTLCBlockEventResponse.prototype.clearHtlclockeventmessagesList = function() {
  return this.setHtlclockeventmessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCCommitEventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCCommitEventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCCommitEventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCCommitEventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
txid: jspb.Message.getFieldWithDefault(msg, 1, ""),
id: jspb.Message.getFieldWithDefault(msg, 2, ""),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
amountinwei: jspb.Message.getFieldWithDefault(msg, 4, ""),
receiveraddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
sourcenetwork: jspb.Message.getFieldWithDefault(msg, 6, ""),
senderaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
sourceasset: jspb.Message.getFieldWithDefault(msg, 8, ""),
destinationaddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
destinationnetwork: jspb.Message.getFieldWithDefault(msg, 10, ""),
destinationasset: jspb.Message.getFieldWithDefault(msg, 11, ""),
timelock: jspb.Message.getFieldWithDefault(msg, 12, 0),
destinationnetworktype: jspb.Message.getFieldWithDefault(msg, 13, 0),
sourcenetworktype: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCCommitEventMessage}
 */
proto.HTLCCommitEventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCCommitEventMessage;
  return proto.HTLCCommitEventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCCommitEventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCCommitEventMessage}
 */
proto.HTLCCommitEventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountinwei(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveraddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcenetwork(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceasset(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationaddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationnetwork(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationasset(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimelock(value);
      break;
    case 13:
      var value = /** @type {!proto.NetworkType} */ (reader.readEnum());
      msg.setDestinationnetworktype(value);
      break;
    case 14:
      var value = /** @type {!proto.NetworkType} */ (reader.readEnum());
      msg.setSourcenetworktype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCCommitEventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCCommitEventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCCommitEventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCCommitEventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getAmountinwei();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReceiveraddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSourcenetwork();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSenderaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSourceasset();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDestinationaddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDestinationnetwork();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDestinationasset();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTimelock();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getDestinationnetworktype();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getSourcenetworktype();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * optional string TxId = 1;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setTxid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bcl.Decimal Amount = 3;
 * @return {?proto.bcl.Decimal}
 */
proto.HTLCCommitEventMessage.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 3));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.HTLCCommitEventMessage} returns this
*/
proto.HTLCCommitEventMessage.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HTLCCommitEventMessage.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string AmountInWei = 4;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getAmountinwei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setAmountinwei = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ReceiverAddress = 5;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getReceiveraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setReceiveraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string SourceNetwork = 6;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getSourcenetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setSourcenetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string SenderAddress = 7;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getSenderaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setSenderaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string SourceAsset = 8;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getSourceasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setSourceasset = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string DestinationAddress = 9;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getDestinationaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setDestinationaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string DestinationNetwork = 10;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getDestinationnetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setDestinationnetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string DestinationAsset = 11;
 * @return {string}
 */
proto.HTLCCommitEventMessage.prototype.getDestinationasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setDestinationasset = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 TimeLock = 12;
 * @return {number}
 */
proto.HTLCCommitEventMessage.prototype.getTimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setTimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional NetworkType DestinationNetworkType = 13;
 * @return {!proto.NetworkType}
 */
proto.HTLCCommitEventMessage.prototype.getDestinationnetworktype = function() {
  return /** @type {!proto.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.NetworkType} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setDestinationnetworktype = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional NetworkType SourceNetworkType = 14;
 * @return {!proto.NetworkType}
 */
proto.HTLCCommitEventMessage.prototype.getSourcenetworktype = function() {
  return /** @type {!proto.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.NetworkType} value
 * @return {!proto.HTLCCommitEventMessage} returns this
 */
proto.HTLCCommitEventMessage.prototype.setSourcenetworktype = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.HTLCCommitTransactionPrepareRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCCommitTransactionPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCCommitTransactionPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCCommitTransactionPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
receiever: jspb.Message.getFieldWithDefault(msg, 1, ""),
hopchainsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
hopassetsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
hopaddressesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
destinationchain: jspb.Message.getFieldWithDefault(msg, 5, ""),
destinationasset: jspb.Message.getFieldWithDefault(msg, 6, ""),
destinationaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
sourceasset: jspb.Message.getFieldWithDefault(msg, 8, ""),
timelock: jspb.Message.getFieldWithDefault(msg, 9, 0),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCCommitTransactionPrepareRequest}
 */
proto.HTLCCommitTransactionPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCCommitTransactionPrepareRequest;
  return proto.HTLCCommitTransactionPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCCommitTransactionPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCCommitTransactionPrepareRequest}
 */
proto.HTLCCommitTransactionPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiever(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHopchains(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addHopassets(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addHopaddresses(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationchain(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationasset(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceasset(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimelock(value);
      break;
    case 10:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCCommitTransactionPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCCommitTransactionPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCCommitTransactionPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiever();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHopchainsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getHopassetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getHopaddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getDestinationchain();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDestinationasset();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDestinationaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSourceasset();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTimelock();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Receiever = 1;
 * @return {string}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getReceiever = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setReceiever = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string HopChains = 2;
 * @return {!Array<string>}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getHopchainsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setHopchainsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.addHopchains = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.clearHopchainsList = function() {
  return this.setHopchainsList([]);
};


/**
 * repeated string HopAssets = 3;
 * @return {!Array<string>}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getHopassetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setHopassetsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.addHopassets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.clearHopassetsList = function() {
  return this.setHopassetsList([]);
};


/**
 * repeated string HopAddresses = 4;
 * @return {!Array<string>}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getHopaddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setHopaddressesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.addHopaddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.clearHopaddressesList = function() {
  return this.setHopaddressesList([]);
};


/**
 * optional string DestinationChain = 5;
 * @return {string}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getDestinationchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setDestinationchain = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string DestinationAsset = 6;
 * @return {string}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getDestinationasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setDestinationasset = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string DestinationAddress = 7;
 * @return {string}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getDestinationaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setDestinationaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string SourceAsset = 8;
 * @return {string}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getSourceasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setSourceasset = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 Timelock = 9;
 * @return {number}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getTimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.setTimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bcl.Decimal Amount = 10;
 * @return {?proto.bcl.Decimal}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 10));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
*/
proto.HTLCCommitTransactionPrepareRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HTLCCommitTransactionPrepareRequest} returns this
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HTLCCommitTransactionPrepareRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCLockEventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCLockEventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCLockEventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCLockEventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
txid: jspb.Message.getFieldWithDefault(msg, 1, ""),
id: jspb.Message.getFieldWithDefault(msg, 2, ""),
hashlock: jspb.Message.getFieldWithDefault(msg, 3, ""),
timelock: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCLockEventMessage}
 */
proto.HTLCLockEventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCLockEventMessage;
  return proto.HTLCLockEventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCLockEventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCLockEventMessage}
 */
proto.HTLCLockEventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashlock(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimelock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCLockEventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCLockEventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCLockEventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCLockEventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHashlock();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimelock();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string TxId = 1;
 * @return {string}
 */
proto.HTLCLockEventMessage.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockEventMessage} returns this
 */
proto.HTLCLockEventMessage.prototype.setTxid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.HTLCLockEventMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockEventMessage} returns this
 */
proto.HTLCLockEventMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string HashLock = 3;
 * @return {string}
 */
proto.HTLCLockEventMessage.prototype.getHashlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockEventMessage} returns this
 */
proto.HTLCLockEventMessage.prototype.setHashlock = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 TimeLock = 4;
 * @return {number}
 */
proto.HTLCLockEventMessage.prototype.getTimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.HTLCLockEventMessage} returns this
 */
proto.HTLCLockEventMessage.prototype.setTimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCLockTransactionPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCLockTransactionPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCLockTransactionPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
receiver: jspb.Message.getFieldWithDefault(msg, 1, ""),
hashlock: jspb.Message.getFieldWithDefault(msg, 2, ""),
timelock: jspb.Message.getFieldWithDefault(msg, 3, 0),
sourceasset: jspb.Message.getFieldWithDefault(msg, 4, ""),
sourcenetwork: jspb.Message.getFieldWithDefault(msg, 5, ""),
destinationnetwork: jspb.Message.getFieldWithDefault(msg, 6, ""),
destinationaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
destinationasset: jspb.Message.getFieldWithDefault(msg, 8, ""),
id: jspb.Message.getFieldWithDefault(msg, 9, ""),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
reward: (f = msg.getReward()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
rewardtimelock: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCLockTransactionPrepareRequest}
 */
proto.HTLCLockTransactionPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCLockTransactionPrepareRequest;
  return proto.HTLCLockTransactionPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCLockTransactionPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCLockTransactionPrepareRequest}
 */
proto.HTLCLockTransactionPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashlock(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimelock(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceasset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcenetwork(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationnetwork(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationasset(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 10:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 11:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setReward(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRewardtimelock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCLockTransactionPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCLockTransactionPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCLockTransactionPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHashlock();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimelock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSourceasset();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourcenetwork();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDestinationnetwork();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDestinationaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDestinationasset();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getReward();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getRewardtimelock();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
};


/**
 * optional string Receiver = 1;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Hashlock = 2;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getHashlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setHashlock = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 Timelock = 3;
 * @return {number}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getTimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setTimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string SourceAsset = 4;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getSourceasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setSourceasset = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string SourceNetwork = 5;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getSourcenetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setSourcenetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string DestinationNetwork = 6;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getDestinationnetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setDestinationnetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string DestinationAddress = 7;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getDestinationaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setDestinationaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string DestinationAsset = 8;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getDestinationasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setDestinationasset = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Id = 9;
 * @return {string}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bcl.Decimal Amount = 10;
 * @return {?proto.bcl.Decimal}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 10));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
*/
proto.HTLCLockTransactionPrepareRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bcl.Decimal Reward = 11;
 * @return {?proto.bcl.Decimal}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getReward = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 11));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
*/
proto.HTLCLockTransactionPrepareRequest.prototype.setReward = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.clearReward = function() {
  return this.setReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.hasReward = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int64 RewardTimelock = 12;
 * @return {number}
 */
proto.HTLCLockTransactionPrepareRequest.prototype.getRewardtimelock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.HTLCLockTransactionPrepareRequest} returns this
 */
proto.HTLCLockTransactionPrepareRequest.prototype.setRewardtimelock = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCRedeemTransactionPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCRedeemTransactionPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCRedeemTransactionPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
secret: jspb.Message.getFieldWithDefault(msg, 2, ""),
asset: jspb.Message.getFieldWithDefault(msg, 3, ""),
destinationaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
senderaddress: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCRedeemTransactionPrepareRequest}
 */
proto.HTLCRedeemTransactionPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCRedeemTransactionPrepareRequest;
  return proto.HTLCRedeemTransactionPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCRedeemTransactionPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCRedeemTransactionPrepareRequest}
 */
proto.HTLCRedeemTransactionPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCRedeemTransactionPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCRedeemTransactionPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCRedeemTransactionPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDestinationaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSenderaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRedeemTransactionPrepareRequest} returns this
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Secret = 2;
 * @return {string}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRedeemTransactionPrepareRequest} returns this
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Asset = 3;
 * @return {string}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRedeemTransactionPrepareRequest} returns this
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string DestinationAddress = 4;
 * @return {string}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.getDestinationaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRedeemTransactionPrepareRequest} returns this
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.setDestinationaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string SenderAddress = 5;
 * @return {string}
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.getSenderaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRedeemTransactionPrepareRequest} returns this
 */
proto.HTLCRedeemTransactionPrepareRequest.prototype.setSenderaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.HTLCRefundTransactionPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HTLCRefundTransactionPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCRefundTransactionPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
destinationaddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HTLCRefundTransactionPrepareRequest}
 */
proto.HTLCRefundTransactionPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HTLCRefundTransactionPrepareRequest;
  return proto.HTLCRefundTransactionPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HTLCRefundTransactionPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HTLCRefundTransactionPrepareRequest}
 */
proto.HTLCRefundTransactionPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HTLCRefundTransactionPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HTLCRefundTransactionPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HTLCRefundTransactionPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDestinationaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRefundTransactionPrepareRequest} returns this
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Asset = 2;
 * @return {string}
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRefundTransactionPrepareRequest} returns this
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string DestinationAddress = 3;
 * @return {string}
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.getDestinationaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.HTLCRefundTransactionPrepareRequest} returns this
 */
proto.HTLCRefundTransactionPrepareRequest.prototype.setDestinationaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HashlockModel.prototype.toObject = function(opt_includeInstance) {
  return proto.HashlockModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HashlockModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HashlockModel.toObject = function(includeInstance, msg) {
  var f, obj = {
secret: jspb.Message.getFieldWithDefault(msg, 1, ""),
hash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HashlockModel}
 */
proto.HashlockModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HashlockModel;
  return proto.HashlockModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HashlockModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HashlockModel}
 */
proto.HashlockModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HashlockModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HashlockModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HashlockModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HashlockModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Secret = 1;
 * @return {string}
 */
proto.HashlockModel.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HashlockModel} returns this
 */
proto.HashlockModel.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Hash = 2;
 * @return {string}
 */
proto.HashlockModel.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HashlockModel} returns this
 */
proto.HashlockModel.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NextNonceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NextNonceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NextNonceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NextNonceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NextNonceRequest}
 */
proto.NextNonceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NextNonceRequest;
  return proto.NextNonceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NextNonceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NextNonceRequest}
 */
proto.NextNonceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NextNonceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NextNonceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NextNonceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NextNonceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.NextNonceRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NextNonceRequest} returns this
 */
proto.NextNonceRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PrepareTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PrepareTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PrepareTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrepareTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
toaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
data: jspb.Message.getFieldWithDefault(msg, 2, ""),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
asset: jspb.Message.getFieldWithDefault(msg, 4, ""),
amountinwei: jspb.Message.getFieldWithDefault(msg, 5, ""),
calldataasset: jspb.Message.getFieldWithDefault(msg, 6, ""),
calldataamountinwei: jspb.Message.getFieldWithDefault(msg, 7, ""),
calldataamount: (f = msg.getCalldataamount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PrepareTransactionResponse}
 */
proto.PrepareTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PrepareTransactionResponse;
  return proto.PrepareTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PrepareTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PrepareTransactionResponse}
 */
proto.PrepareTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 3:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountinwei(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalldataasset(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalldataamountinwei(value);
      break;
    case 8:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setCalldataamount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PrepareTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PrepareTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PrepareTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrepareTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAmountinwei();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCalldataasset();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCalldataamountinwei();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCalldataamount();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ToAddress = 1;
 * @return {string}
 */
proto.PrepareTransactionResponse.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Data = 2;
 * @return {string}
 */
proto.PrepareTransactionResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bcl.Decimal Amount = 3;
 * @return {?proto.bcl.Decimal}
 */
proto.PrepareTransactionResponse.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 3));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.PrepareTransactionResponse} returns this
*/
proto.PrepareTransactionResponse.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PrepareTransactionResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Asset = 4;
 * @return {string}
 */
proto.PrepareTransactionResponse.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string AmountInWei = 5;
 * @return {string}
 */
proto.PrepareTransactionResponse.prototype.getAmountinwei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.setAmountinwei = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string CallDataAsset = 6;
 * @return {string}
 */
proto.PrepareTransactionResponse.prototype.getCalldataasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.setCalldataasset = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string CallDataAmountInWei = 7;
 * @return {string}
 */
proto.PrepareTransactionResponse.prototype.getCalldataamountinwei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.setCalldataamountinwei = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bcl.Decimal CallDataAmount = 8;
 * @return {?proto.bcl.Decimal}
 */
proto.PrepareTransactionResponse.prototype.getCalldataamount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 8));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.PrepareTransactionResponse} returns this
*/
proto.PrepareTransactionResponse.prototype.setCalldataamount = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PrepareTransactionResponse} returns this
 */
proto.PrepareTransactionResponse.prototype.clearCalldataamount = function() {
  return this.setCalldataamount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PrepareTransactionResponse.prototype.hasCalldataamount = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpenderAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SpenderAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpenderAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpenderAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
asset: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpenderAddressRequest}
 */
proto.SpenderAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpenderAddressRequest;
  return proto.SpenderAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpenderAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpenderAddressRequest}
 */
proto.SpenderAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpenderAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpenderAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpenderAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpenderAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Asset = 1;
 * @return {string}
 */
proto.SpenderAddressRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpenderAddressRequest} returns this
 */
proto.SpenderAddressRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionBuilderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionBuilderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionBuilderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionBuilderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
args: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionBuilderRequest}
 */
proto.TransactionBuilderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionBuilderRequest;
  return proto.TransactionBuilderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionBuilderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionBuilderRequest}
 */
proto.TransactionBuilderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TransactionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionBuilderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionBuilderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionBuilderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionBuilderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TransactionType Type = 1;
 * @return {!proto.TransactionType}
 */
proto.TransactionBuilderRequest.prototype.getType = function() {
  return /** @type {!proto.TransactionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.TransactionType} value
 * @return {!proto.TransactionBuilderRequest} returns this
 */
proto.TransactionBuilderRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Args = 2;
 * @return {string}
 */
proto.TransactionBuilderRequest.prototype.getArgs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionBuilderRequest} returns this
 */
proto.TransactionBuilderRequest.prototype.setArgs = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransactionExecutionContext.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionExecutionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionExecutionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionExecutionContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionExecutionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
attempts: jspb.Message.getFieldWithDefault(msg, 1, 0),
fee: (f = msg.getFee()) && proto.Fee.toObject(includeInstance, f),
nonce: jspb.Message.getFieldWithDefault(msg, 3, ""),
publishedtransactionidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionExecutionContext}
 */
proto.TransactionExecutionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionExecutionContext;
  return proto.TransactionExecutionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionExecutionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionExecutionContext}
 */
proto.TransactionExecutionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttempts(value);
      break;
    case 2:
      var value = new proto.Fee;
      reader.readMessage(value,proto.Fee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPublishedtransactionids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionExecutionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionExecutionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionExecutionContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionExecutionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttempts();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Fee.serializeBinaryToWriter
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPublishedtransactionidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional int32 Attempts = 1;
 * @return {number}
 */
proto.TransactionExecutionContext.prototype.getAttempts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransactionExecutionContext} returns this
 */
proto.TransactionExecutionContext.prototype.setAttempts = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Fee Fee = 2;
 * @return {?proto.Fee}
 */
proto.TransactionExecutionContext.prototype.getFee = function() {
  return /** @type{?proto.Fee} */ (
    jspb.Message.getWrapperField(this, proto.Fee, 2));
};


/**
 * @param {?proto.Fee|undefined} value
 * @return {!proto.TransactionExecutionContext} returns this
*/
proto.TransactionExecutionContext.prototype.setFee = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransactionExecutionContext} returns this
 */
proto.TransactionExecutionContext.prototype.clearFee = function() {
  return this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransactionExecutionContext.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Nonce = 3;
 * @return {string}
 */
proto.TransactionExecutionContext.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionExecutionContext} returns this
 */
proto.TransactionExecutionContext.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string PublishedTransactionIds = 4;
 * @return {!Array<string>}
 */
proto.TransactionExecutionContext.prototype.getPublishedtransactionidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.TransactionExecutionContext} returns this
 */
proto.TransactionExecutionContext.prototype.setPublishedtransactionidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.TransactionExecutionContext} returns this
 */
proto.TransactionExecutionContext.prototype.addPublishedtransactionids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TransactionExecutionContext} returns this
 */
proto.TransactionExecutionContext.prototype.clearPublishedtransactionidsList = function() {
  return this.setPublishedtransactionidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
prepareargs: jspb.Message.getFieldWithDefault(msg, 1, ""),
type: jspb.Message.getFieldWithDefault(msg, 2, 0),
networktype: jspb.Message.getFieldWithDefault(msg, 3, 0),
fromaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
swapid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionRequest}
 */
proto.TransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionRequest;
  return proto.TransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionRequest}
 */
proto.TransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrepareargs(value);
      break;
    case 2:
      var value = /** @type {!proto.TransactionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.NetworkType} */ (reader.readEnum());
      msg.setNetworktype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwapid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrepareargs();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNetworktype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFromaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSwapid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string PrepareArgs = 1;
 * @return {string}
 */
proto.TransactionRequest.prototype.getPrepareargs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setPrepareargs = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TransactionType Type = 2;
 * @return {!proto.TransactionType}
 */
proto.TransactionRequest.prototype.getType = function() {
  return /** @type {!proto.TransactionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TransactionType} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NetworkType NetworkType = 3;
 * @return {!proto.NetworkType}
 */
proto.TransactionRequest.prototype.getNetworktype = function() {
  return /** @type {!proto.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.NetworkType} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setNetworktype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string FromAddress = 4;
 * @return {string}
 */
proto.TransactionRequest.prototype.getFromaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setFromaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string SwapId = 5;
 * @return {string}
 */
proto.TransactionRequest.prototype.getSwapid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionRequest} returns this
 */
proto.TransactionRequest.prototype.setSwapid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
networkname: jspb.Message.getFieldWithDefault(msg, 3, ""),
transactionhash: jspb.Message.getFieldWithDefault(msg, 4, ""),
confirmations: jspb.Message.getFieldWithDefault(msg, 5, 0),
timestamp: (f = msg.getTimestamp()) && proto.DateTimeOffset.toObject(includeInstance, f),
feeamount: (f = msg.getFeeamount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
feeasset: jspb.Message.getFieldWithDefault(msg, 8, ""),
status: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionResponse}
 */
proto.TransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionResponse;
  return proto.TransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionResponse}
 */
proto.TransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionhash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmations(value);
      break;
    case 6:
      var value = new proto.DateTimeOffset;
      reader.readMessage(value,proto.DateTimeOffset.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 7:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setFeeamount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeasset(value);
      break;
    case 9:
      var value = /** @type {!proto.TransactionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetworkname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransactionhash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.DateTimeOffset.serializeBinaryToWriter
    );
  }
  f = message.getFeeamount();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getFeeasset();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional bcl.Decimal Amount = 1;
 * @return {?proto.bcl.Decimal}
 */
proto.TransactionResponse.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 1));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.TransactionResponse} returns this
*/
proto.TransactionResponse.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransactionResponse.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Asset = 2;
 * @return {string}
 */
proto.TransactionResponse.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string NetworkName = 3;
 * @return {string}
 */
proto.TransactionResponse.prototype.getNetworkname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setNetworkname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string TransactionHash = 4;
 * @return {string}
 */
proto.TransactionResponse.prototype.getTransactionhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setTransactionhash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 Confirmations = 5;
 * @return {number}
 */
proto.TransactionResponse.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setConfirmations = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional DateTimeOffset Timestamp = 6;
 * @return {?proto.DateTimeOffset}
 */
proto.TransactionResponse.prototype.getTimestamp = function() {
  return /** @type{?proto.DateTimeOffset} */ (
    jspb.Message.getWrapperField(this, proto.DateTimeOffset, 6));
};


/**
 * @param {?proto.DateTimeOffset|undefined} value
 * @return {!proto.TransactionResponse} returns this
*/
proto.TransactionResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransactionResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bcl.Decimal FeeAmount = 7;
 * @return {?proto.bcl.Decimal}
 */
proto.TransactionResponse.prototype.getFeeamount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 7));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.TransactionResponse} returns this
*/
proto.TransactionResponse.prototype.setFeeamount = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.clearFeeamount = function() {
  return this.setFeeamount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransactionResponse.prototype.hasFeeamount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string FeeAsset = 8;
 * @return {string}
 */
proto.TransactionResponse.prototype.getFeeasset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setFeeasset = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional TransactionStatus Status = 9;
 * @return {!proto.TransactionStatus}
 */
proto.TransactionResponse.prototype.getStatus = function() {
  return /** @type {!proto.TransactionStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.TransactionStatus} value
 * @return {!proto.TransactionResponse} returns this
 */
proto.TransactionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransferPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransferPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransferPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
toaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
amount: (f = msg.getAmount()) && protobuf$net_bcl_pb.Decimal.toObject(includeInstance, f),
memo: jspb.Message.getFieldWithDefault(msg, 4, ""),
fromaddress: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransferPrepareRequest}
 */
proto.TransferPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransferPrepareRequest;
  return proto.TransferPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransferPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransferPrepareRequest}
 */
proto.TransferPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 3:
      var value = new protobuf$net_bcl_pb.Decimal;
      reader.readMessage(value,protobuf$net_bcl_pb.Decimal.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransferPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransferPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransferPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransferPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      protobuf$net_bcl_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFromaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string ToAddress = 1;
 * @return {string}
 */
proto.TransferPrepareRequest.prototype.getToaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransferPrepareRequest} returns this
 */
proto.TransferPrepareRequest.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Asset = 2;
 * @return {string}
 */
proto.TransferPrepareRequest.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransferPrepareRequest} returns this
 */
proto.TransferPrepareRequest.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bcl.Decimal Amount = 3;
 * @return {?proto.bcl.Decimal}
 */
proto.TransferPrepareRequest.prototype.getAmount = function() {
  return /** @type{?proto.bcl.Decimal} */ (
    jspb.Message.getWrapperField(this, protobuf$net_bcl_pb.Decimal, 3));
};


/**
 * @param {?proto.bcl.Decimal|undefined} value
 * @return {!proto.TransferPrepareRequest} returns this
*/
proto.TransferPrepareRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TransferPrepareRequest} returns this
 */
proto.TransferPrepareRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TransferPrepareRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Memo = 4;
 * @return {string}
 */
proto.TransferPrepareRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransferPrepareRequest} returns this
 */
proto.TransferPrepareRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string FromAddress = 5;
 * @return {string}
 */
proto.TransferPrepareRequest.prototype.getFromaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TransferPrepareRequest} returns this
 */
proto.TransferPrepareRequest.prototype.setFromaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.NetworkType = {
  EVM: 0,
  SOLANA: 1,
  STARKNET: 2
};

/**
 * @enum {number}
 */
proto.TransactionStatus = {
  COMPLETED: 0,
  INITIATED: 1,
  FAILED: 2
};

/**
 * @enum {number}
 */
proto.TransactionType = {
  TRANSFER: 0,
  APPROVE: 1,
  HTLCCOMMIT: 2,
  HTLCLOCK: 3,
  HTLCREDEEM: 4,
  HTLCREFUND: 5,
  HTLCADDLOCKSIG: 6
};

goog.object.extend(exports, proto);
