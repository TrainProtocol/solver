// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Train.Solver.Data.Npgsql;

#nullable disable

namespace Train.Solver.Data.Npgsql.Migrations
{
    [DbContext(typeof(SolverDbContext))]
    [Migration("20250812105030_MakeServiceFeeRequired")]
    partial class MakeServiceFeeRequired
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FeeTokenId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("LastFeeValues")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasComment("Transfer=0,Approve=1,HTLCCommit=2,HTLCLock=3,HTLCRedeem=4,HTLCRefund=5,HTLCAddLockSig=6");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("FeeTokenId");

                    b.HasIndex("TokenId", "FeeTokenId", "TransactionType")
                        .IsUnique();

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChainId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FeePercentageIncrease")
                        .HasColumnType("integer");

                    b.Property<int>("FeeType")
                        .HasColumnType("integer");

                    b.Property<string>("HTLCNativeContractAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HTLCTokenContractAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NativeTokenId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasComment("EVM=0,Solana=1,Starknet=2,Fuel=3");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NativeTokenId");

                    b.HasIndex("ChainId", "Type")
                        .IsUnique();

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.HasIndex("ProviderName", "NetworkId")
                        .IsUnique();

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.RateProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RateProviders");

                    b.HasData(
                        new
                        {
                            Id = 100000,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SameAsset",
                            Version = 0u
                        },
                        new
                        {
                            Id = 100001,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Binance",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DestinationTokenId")
                        .HasColumnType("integer");

                    b.Property<int>("DestinationWalletId")
                        .HasColumnType("integer");

                    b.Property<bool>("IgnoreExpenseFee")
                        .HasColumnType("boolean");

                    b.Property<string>("MaxAmountInSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MinAmountInSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RateProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceFeeId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceTokenId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceWalletId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasComment("Active=0,Inactive=1,Archived=2");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DestinationTokenId");

                    b.HasIndex("DestinationWalletId");

                    b.HasIndex("RateProviderId");

                    b.HasIndex("ServiceFeeId");

                    b.HasIndex("SourceWalletId");

                    b.HasIndex("SourceTokenId", "DestinationTokenId")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.ServiceFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("FeeInUsd")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FeePercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServiceFees");

                    b.HasData(
                        new
                        {
                            Id = 100000,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FeeInUsd = 0m,
                            FeePercentage = 0m,
                            Name = "Free",
                            Version = 0u
                        },
                        new
                        {
                            Id = 100001,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FeeInUsd = 0m,
                            FeePercentage = 0m,
                            Name = "Default",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.SignerAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("SupportedTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SignerAgents");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Swap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FeeAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hashlock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MetricId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CommitId")
                        .IsUnique();

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DestinationAddress");

                    b.HasIndex("RouteId");

                    b.HasIndex("SourceAddress");

                    b.ToTable("Swaps");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.SwapMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DestinationNetwork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProfitInUsd")
                        .HasColumnType("numeric");

                    b.Property<string>("SourceNetwork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SwapId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<decimal>("VolumeInUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DestinationNetwork");

                    b.HasIndex("SourceNetwork");

                    b.HasIndex("SwapId")
                        .IsUnique();

                    b.ToTable("SwapMetrics");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Decimals")
                        .HasColumnType("integer");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer");

                    b.Property<string>("TokenContract")
                        .HasColumnType("text");

                    b.Property<int>("TokenPriceId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Asset");

                    b.HasIndex("TokenPriceId");

                    b.HasIndex("NetworkId", "Asset")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.TokenPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PriceInUsd")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("TokenPrices");

                    b.HasData(
                        new
                        {
                            Id = 10002,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "bitcoin",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "BTC",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10008,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "fuel-network",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "FUEL",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10014,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "avalanche-2",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "AVAX",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10018,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "optimism",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "OP",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10026,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "ethereum",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "ETH",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10035,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "solana",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "SOL",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10043,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "dai",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "DAI",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10046,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "usd-coin",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "USDC",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10050,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "immutable-x",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "IMX",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10054,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "binancecoin",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "BNB",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10055,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "tether",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "USDT",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10056,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "matic-network",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "MATIC",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10063,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "polygon-ecosystem-token",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "POL",
                            Version = 0u
                        },
                        new
                        {
                            Id = 10069,
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = "ronin",
                            LastUpdated = new DateTimeOffset(new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PriceInUsd = 0m,
                            Symbol = "RON",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FeeAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasComment("Completed=0,Initiated=1,Failed=2");

                    b.Property<int?>("SwapId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasComment("Transfer=0,Approve=1,HTLCCommit=2,HTLCLock=3,HTLCRedeem=4,HTLCRefund=5,HTLCAddLockSig=6");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.HasIndex("Status");

                    b.HasIndex("SwapId");

                    b.HasIndex("TransactionHash");

                    b.HasIndex("Type");

                    b.HasIndex("TransactionHash", "NetworkId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.TrustedWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NetworkType")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Address", "NetworkType");

                    b.HasIndex("Name", "NetworkType")
                        .IsUnique();

                    b.ToTable("TrustedWallets");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NetworkType")
                        .HasColumnType("integer");

                    b.Property<int>("SignerAgentId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("SignerAgentId");

                    b.HasIndex("Address", "NetworkType");

                    b.HasIndex("Name", "NetworkType")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Expense", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Token", "FeeToken")
                        .WithMany()
                        .HasForeignKey("FeeTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeToken");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Network", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Token", "NativeToken")
                        .WithMany()
                        .HasForeignKey("NativeTokenId");

                    b.Navigation("NativeToken");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Node", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Network", "Network")
                        .WithMany("Nodes")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Route", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Token", "DestinationToken")
                        .WithMany()
                        .HasForeignKey("DestinationTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Wallet", "DestinationWallet")
                        .WithMany()
                        .HasForeignKey("DestinationWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.RateProvider", "RateProvider")
                        .WithMany()
                        .HasForeignKey("RateProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.ServiceFee", "ServiceFee")
                        .WithMany()
                        .HasForeignKey("ServiceFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Token", "SourceToken")
                        .WithMany()
                        .HasForeignKey("SourceTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Wallet", "SourceWallet")
                        .WithMany()
                        .HasForeignKey("SourceWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationToken");

                    b.Navigation("DestinationWallet");

                    b.Navigation("RateProvider");

                    b.Navigation("ServiceFee");

                    b.Navigation("SourceToken");

                    b.Navigation("SourceWallet");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Swap", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.SwapMetric", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Swap", "Swap")
                        .WithOne("Metric")
                        .HasForeignKey("Train.Solver.Data.Abstractions.Entities.SwapMetric", "SwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Swap");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Token", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Network", "Network")
                        .WithMany("Tokens")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.TokenPrice", "TokenPrice")
                        .WithMany()
                        .HasForeignKey("TokenPriceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("TokenPrice");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Transaction", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Network", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Train.Solver.Data.Abstractions.Entities.Swap", "Swap")
                        .WithMany("Transactions")
                        .HasForeignKey("SwapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Network");

                    b.Navigation("Swap");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Wallet", b =>
                {
                    b.HasOne("Train.Solver.Data.Abstractions.Entities.SignerAgent", "SignerAgent")
                        .WithMany()
                        .HasForeignKey("SignerAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignerAgent");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Network", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Train.Solver.Data.Abstractions.Entities.Swap", b =>
                {
                    b.Navigation("Metric");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
