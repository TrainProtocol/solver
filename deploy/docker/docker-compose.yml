services:
  solver.api:
    build:
      context: ../..
      dockerfile: csharp/src/API/Dockerfile
      args:
        DOTNET_VERSION: ${DOTNET_VERSION}
    container_name: solver.api
    ports:
      - "8080:8080"
    environment:
      TrainSolver__TemporalServerHost: ${TEMPORAL_SERVER_HOST}
      TrainSolver__DatabaseConnectionString: ${TRAIN_SOLVER_DB_CONNECTION_STRING}
      TrainSolver__RedisConnectionString: ${TRAIN_SOLVER_REDIS_CONNECTION_STRING}
      ASPNETCORE_URLS: http://+:8080
    depends_on:
      - temporal
      - db
      - redis
      - vault
    networks:
      - app-network

  solver.swap:
    build:
      context: ../..
      dockerfile: csharp/src/Workflow.Swap/Dockerfile
      args:
        DOTNET_VERSION: ${DOTNET_VERSION}
    container_name: solver.swap
    environment:
      TrainSolver__TemporalServerHost: ${TEMPORAL_SERVER_HOST}
      TrainSolver__DatabaseConnectionString: ${TRAIN_SOLVER_DB_CONNECTION_STRING}
      TrainSolver__RedisConnectionString: ${TRAIN_SOLVER_REDIS_CONNECTION_STRING}
      TrainSolver__HashicorpKeyVaultUsername: ${HASHICORP_KEYVAULT_USER}
      TrainSolver__HashicorpKeyVaultPassword: ${HASHICORP_KEYVAULT_PASSWORD}
      TrainSolver__HashicorpKeyVaultUri: ${TRAIN_SOLVER_HASHICORP_KEYVAULT_CONNECTION_STRING}
    depends_on:
      - temporal
      - db
      - redis
      - solver.api
      - vault
    networks:
      - app-network

  solver.evm:
    build:
      context: ../..
      dockerfile: csharp/src/Workflow.EVM/Dockerfile
      args:
        DOTNET_VERSION: ${DOTNET_VERSION}
    container_name: solver.evm
    environment:
      TrainSolver__TemporalServerHost: ${TEMPORAL_SERVER_HOST}
      TrainSolver__DatabaseConnectionString: ${TRAIN_SOLVER_DB_CONNECTION_STRING}
      TrainSolver__RedisConnectionString: ${TRAIN_SOLVER_REDIS_CONNECTION_STRING}
      TrainSolver__HashicorpKeyVaultUsername: ${HASHICORP_KEYVAULT_USER}
      TrainSolver__HashicorpKeyVaultPassword: ${HASHICORP_KEYVAULT_PASSWORD}
      TrainSolver__HashicorpKeyVaultUri: ${TRAIN_SOLVER_HASHICORP_KEYVAULT_CONNECTION_STRING}
    depends_on:
      - temporal
      - db
      - redis
      - solver.api
      - vault
    networks:
      - app-network

  solver.solana:
    build:
      context: ../..
      dockerfile: csharp/src/Workflow.Solana/Dockerfile
      args:
        DOTNET_VERSION: ${DOTNET_VERSION}
    container_name: solver.solana
    environment:
      TrainSolver__TemporalServerHost: ${TEMPORAL_SERVER_HOST}
      TrainSolver__DatabaseConnectionString: ${TRAIN_SOLVER_DB_CONNECTION_STRING}
      TrainSolver__RedisConnectionString: ${TRAIN_SOLVER_REDIS_CONNECTION_STRING}
      TrainSolver__HashicorpKeyVaultUsername: ${HASHICORP_KEYVAULT_USER}
      TrainSolver__HashicorpKeyVaultPassword: ${HASHICORP_KEYVAULT_PASSWORD}
      TrainSolver__HashicorpKeyVaultUri: ${TRAIN_SOLVER_HASHICORP_KEYVAULT_CONNECTION_STRING}
    depends_on:
      - temporal
      - db
      - redis
      - solver.api
      - vault
    networks:
      - app-network
      
  solver.starknet:
    build:
      context: ../..
      dockerfile: js/Dockerfile
      args:
        NETWORK: starknet
    container_name: solver.starknet
    environment:
      NODE_ENV: production
      TrainSolver__TemporalServerHost: ${TEMPORAL_SERVER_HOST}
      TrainSolver__DatabaseConnectionString: ${TRAIN_SOLVER_DB_CONNECTION_STRING}
      TrainSolver__RedisConnectionString: ${TRAIN_SOLVER_REDIS_CONNECTION_STRING}
      TrainSolver__HashicorpKeyVaultUsername: ${HASHICORP_KEYVAULT_USER}
      TrainSolver__HashicorpKeyVaultPassword: ${HASHICORP_KEYVAULT_PASSWORD}
      TrainSolver__HashicorpKeyVaultUri: ${TRAIN_SOLVER_HASHICORP_KEYVAULT_CONNECTION_STRING}
    depends_on:
      - temporal
      - db
      - redis
      - solver.api
      - vault
    networks:
      - app-network

  # Temporal.io server service
  temporal:
    image: "temporalio/auto-setup:latest"
    container_name: temporal.server
    environment:
      DB: "postgres12"
      DB_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PWD: ${POSTGRES_PASSWORD}
      POSTGRES_SEEDS: "db"
      DBNAME: ${TEMPORAL_DB_NAME}
      VISIBILITY_DBNAME: ${TEMPORAL_VISIBILITY_DB_NAME}
    ports:
      - "7233:7233"
    depends_on:
      - db
    networks:
      - app-network

  db:
    image: "postgres:16"
    container_name: postgresql.db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis service
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - app-network

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "${HASHICORP_KEYVAULT_PORT}:8200"
    env_file:
    - ./.env  
    environment:
      VAULT_LOCAL_CONFIG: |
        ui = true
        listener "tcp" {
          address = "0.0.0.0:${HASHICORP_KEYVAULT_PORT}"
          tls_disable = 1
        }
        storage "file" {
          path = "/vault/data"
        }
        disable_mlock = true
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_config:/vault/config
      - ./vault/docker-entrypoint.sh:/vault/docker-entrypoint.sh
      - ./vault/:/vault/keys
      - vault_env:/vault/env
      - ./vault:/vault/user
      - ./.env:/vault/.env
    command: sh /vault/docker-entrypoint.sh
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge
    
volumes:
  postgres_data:
    name: postgres_data
  vault_data:
    name: vault_data
  vault_config:
    name: vault_config
  vault_env:
    name: vault_env